Tasks
    
    
Make a form component
    Have input
    Have button
        Have event happen




The event component
    register a value for the note 
        add the value to an array
        set up a holder component

holder component
    add the note

Have not components
    The note itself
    Delete the component

There needs to be an array for the notes
    create a note
    delete a note


    make sure to set tup the event well 


I tried to have the form and the event be in different places. 
They need to be together, or else nothing will trigger. likely related to all of the button being one compenent, and the event by itself not being a component


Next I need to add a note. figure out appending, look at state

  const [count, setCount] = useState(0)


11/19

why use state as opposed to normal variables
    the local variables wont remain inbetween screen renders

    const [index, setIndex] = useState(0);

index is a state varriable and sexIndex thesetter function

function handleClick() {
  setIndex(index + 1);
}


hooks are usestate or anything else starting with use
    ibky available while react is rendering. allow to "hook" into different features of react
    only usable on top level of compnents or own hooks
    
so...with notes...


I need to have an array wheneevr the notes are created, modified or destroyed
    id=0, id=1
    creating one would append the list at the end 
    deestroying one...it would need to delete that note AND reduce the value of all subsequent ones by 1

I need a way to have these values translate visually

notes(
    id{something}
)

something like that


Need to figure out how to set up transition of data


const [index, setIndex] = useState(0);



const Human1 = {
  name: "Man Person",
  age: "526",
  occupation: "Human Worker"
}


 {Human1.name} 
 {Human1.age} 
 {Human1.occupation} 


 the state is the notelist component
    it starts at 0
    every addition will add 1 to the index and 1 to the total.
    subtractions will do the same



    return
const note = {
    id= index?,
    content= "textareavariable"

}


how do i transfer te data in react?


11/19

Props
    they are like attributes for your components

step1: declare what you want in the children

    export default function Profile() {
        return (
          <Avatar
            person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}
            size={100}
          />
        );
      }

step2: declare what kind you want in the component declaration

function Avatar({ person, size }) {
    // person and size are available here
  }


  11/20

  Return the child in the parent
    notebook
        note
    

parent will hve a function and trigger button
   
 notebook
    note
    addnotefunction
    button(addnote)


have props set up so the child knows what it will recieve from the parent
parentToChild is the prop
<Child parentToChild={data}/>


the data will be set up by the form



NOW there are two options
functional component
    everything is set up in 1 function

export default function Child({parentToChild}) {
    return (
        <div>
            {parentToChild}
        </div>
    )
}



Class component
    there are classes set up for everything

export default class Child extends Component {
    render() {
        return (
            <div>
                {this.props.parentToChild}
            </div>
        )
    }
}

The child will display the parenttochild prop(the form data)

Make sure all of the functions you want to take place in the parent are literally in the parent

have declaration before the return. dont want to return a const
    export
    function Notebook(){
        const [Notenumber, setNotenumber] = useState(0);
        const Notecreate = () => {
          setData("This is the note from the notebook to the note"
          //id = setNotenumber += 1;
          )}
          
      
      return(

      
next time: make sure how to properly set up the props in the function. getting error 
    Uncaught ReferenceError: SetNotenumber is not defined

11/21

syntax error. Added console.log. didnt show up, but no error. 

Got it to run. It printed "Did it work" twice. Maybe figure out more about testing to know WHY

11/23

react will typically double run everything using something called strict mode as a way to check for bugs
    react tools 

just try to better understandusestate

11/24

Componenets are organized pieces of code that can be easilyt replicated.

State is the condition your component is in. It allows components to "remember" things.  

Hooks are ways to use different features from your components. 
    ex state hooks, references, syncing to outside systems

Props are the mechanism for componenets to comunicate to each other
    they are the way to pass info from parent componenet to child component


components are towns
states are what goods they have or want
hooks are an order of how they wants something new
props are the actual infastructure on how to get it


For state

const [Notenumber, setNotenumber] = useState(0);
    Notenumber is a value that contains the updated state
    setNotenumber is a function that describes how to update it

I tried onclick(setnotenumber), nothing ran.
I tried it instead with () => setNotenumber(Notenumber + 1) and got an answer
I think an issue is that setNotenumber isnt a component itself but rather a function that is part of another component
    I need to split it off to pertly work 

11/25

Bade a BIG misinterpretation. In the onclick function, DO NOT put the set...part of use state in there. instead, declare ANOTHER function in there.
    Run that NEW name, and declare the setstate in there. 

I noticed in the console.log the numbers go from 0 ->click 1 and then 0 at the end. 
I think that the last part is becasue of the way I run app.js at the end, which I need to rerun to work


setNotenumber( Notenumber += 1) 
    causes the numbers to go 1 1
    Notenumber + 1 goes 0 1


    <form>
<div>Add a note</div>
    <textarea></textarea>
    <button onClick = {Increaseamount}
      >Submit</button>

</form>

is different from

<button onClick = {Increaseamount}

the former doesnt cause  an increment more than once. the later does

check out setddata on the freecodecamp page. could be key to setting up the notes
    can pass the inpuitted data to the child componenet as a parameter

11/26

Notenumber, setNotenumber

let Increaseamount = () => {
setNotenumber(Notenumber + 1)  
console.log(Notenumber)
console.log(setNotenumber)
}

Notenumber is the actual value
setNotenumber is just the way to declare it


find out why the textcontent isnt printing

11/28

need onchange AND onsubmit
propsm, saw best diffenetion :arguments passed to componenets
need to define all of the changes to the component


when I try to set the Notenumber, the first change gets empert strinf and subsequent ones fget undefined

I think the issue has to do with the value. The value is initially 0, but when I change the usestate to '', it is at first,
    emoty string. This means that onchange iss going with the inisial state, no matter what it is
            that is bwecause that is whaat is being described in the value
    then why is it changing to undefined when I change the value?
            I need it to be event.target.value, NOT event.target.Notenumber

Next, I need to set up a state for a number awway, AND a state for the values..
        wait, no. whats what comoponenets are for. Find a way to assign the texts to an array point.



11/29

I need to use render lists in order to create copies of a child component

One issue, a sidequest really, is to have the value of the textarea go away after I process it.

The render list will need a key value pair
    This part is perfect because I can use the index note values as tha pair        

I have a way to set the index number AND a way to set the value. I just need a way to bring everything together


11/30

I need to use render() somehow. 
wait... no thats depreciated. use createroot

I read something about useList being a useful hook for lists

saw advice on https://www.reddit.com/r/reactjs/comments/f461db/how_to_clone_div_content_in_react_js/
    

Add the number of text fields to the state, then map over the number in your state to create the new components.


could use map() to append an array

there was an error, cant use Notecontent as props for a child because it is an object and not an array
    Need to be a specific part of notearray

so next, sync the texts with the stae.
    can there be more than 1?
        the state of the form in general or state for the children?
    I think form in general....maybe  


12/1

could push the values into an array for storage. the issue is the array keeps updating.
find way to coordinate with state

Arrays (and objects) should be tr4eated as read-only, so dont try to mutate them with methods like push() and pop().
    Need to keep making new arrays, using methods like filter() and map()



useStaet([])  can be an array. ggod for lists
can use maps to make objects that add 

What I can do is to set up an array for the id, and simultaneously map the id and contrent in another state

the state   
    the index
    the content
    ???


for the id, value object pairing, when I try to input Indexnumber, I get 
0 as the  index number
an array of nother for the notelist,
what I typed in for the Notecontent

for the SECOND value, I get
1 as the index number
an array of "o' "n" "e" "" for the array
and "two" for the input

for the THIRD value, I get
2 as the index number
an array of "t" "w" "o" ""
and "three" for the input

Analysis
    The index numbers are working perfectly well
    the array was supposed to have all of the individual words as arrays, nnot letters
    the array starts off blank
    the previous values of the array get overwritten
    it knows the current input being givem

    the issues seem to coalece around the notelist and the notecontent being mixed together

    I also noticed that the object values DO get inputted as well, as a single value. the 11st is empty. the second has "one" as a value, along with 
    all of the numbers individually, and the same pattern going forward



    did better 

   
    setNotelist([...Notecontent,{id: Indexnumber, name:Notecontent}])
   
   wrong
   
      setNotelist([...Notelist,{id: Indexnumber, name:Notecontent}])

correct



12/2 starting usestate with nothign doesnt rfix the issue of the first element not appending

I swapped the two parts of   setNotelist([...Notelist,{id:Indexnumber, name:Notecontent}])
    to no effect. I believe that 

12/3

The issue, at least according to chatgpt is async state updating. The state updates, THEN applies the formula. The function reflects on the state of then. 

solution: the functional form will be more up to date.


figure out how to do prevState functions



12/4


changing the state only works until next render
x = 0
render

x + 1
x + 1
x + 1

itll be 1 , not 3 because they are doing the same thign repeatly to the same initial valuer


        setNumber(number + 5);
        alert(number);

the alert will be for 5 because the setting is for the NEXT itteration

setnumber(x -> n + 1)
this DOES work because it is doign seomthing to the state instead of just replacing it
    updater function


updater function key, need to find correct syntax

12/5

setIndexnumber(n => n + 10);
setIndexnumber(prevIndexnumber => prevIndexnumber + 10)

a callback function like this doesnt need to declare n elsewhere
    can help make asyncronous functions


setIndexnumber((prevIndexnumber) => {
  const newindex = prevIndexnumber + 1;
  console.log(newindex); // Logs the updated value
  return prevIndexnumber + newindex;
});


works



const newindex = Indexnumber + 1;
setIndexnumber(Indexnumber + newindex)
console.log(newindex)
console.log(Indexnumber);

doesnt

different is that the former returns something and the latter doesnt


find way get old notelist data

12/6

might need to return notecontent. make sure that everything is recieving it

setnotelist IS getting the notecontent
didnt need to return because its a declared state

the indexnumber is increasing 1, 2, 4, 8 exponentially. why?
notelist coming back undefined
    seperate function?

I think an issue is having two seperate states update based on one eve4nt
    either seperate the code more
    or have one big object state to hanfle them as an obhject otgether
    

read on https://react.dev/learn/choosing-the-state-structure
that if im having id and content updated together, they should be on one state. makes sense

need to figure out how to do that AND have the state be an array. can do objects, can do arrays, having trouble wiwth array of objects


12/7

I think I do need to have seperate states because id is iterable and the content isnt

At fist I couldnt get object to iterate, wrapper another later of brackets around

The notelist IS generating, just delaying, plus im not sure how to append the ids
try to find array of objects id updating

https://www.reddit.com/r/reactjs/comments/y9lrdm/how_to_merge_arrays_of_two_states/

useReducer 

setNotelist ((Notelist) => [ ...Notelist, {id: this+1, content:Notecontent} ],
    setNotelist ((prevNotelist) => [ ...prevNotelist, {id: prevNotelist.length, content:Notecontent} ],

Remember to use prev to do the proper input
find way to have proper notecontent. check chatygpt


returning the html isnt working well

12/8

should probably stop having the note state inside the notecontent

12/9

look at https://www.reddit.com/r/webdev/comments/15jjy17/what_should_appjs_include_in_a_full_stack_app/

try to split code up more in components and hooks folders

I think handlechange is a hook, not a component. need to move
nvm. need to do more research

BUT I do need to reorganize howw app.js works. I dont THINK it should have EVERYTHING

12/10

Props is something that is passed inside a component and is used by fellow components in the react app. 
On the contrary state is something that is managed inside the component and something that is prone to changes.

this.state is how state is declared in classes for OOP
never call hooks inside of a any logic, it should always be on the top level!

remember it needs to be import....from....

Need to get parent to import to children. find way to have props inputted properly

12/11

children componenets have to be rednerable
componets MUST return JSX
so having a component to declare a state variable isnt going to be viable because it isnt rendering anything, its just assigning state

functional components are the default composition of 

12/12

so handlechange isnt a component, its a function
Note should handle everything about the submit event...I think

12/13

deleted handlechange. more sure that the function should just be included elsewhere. 
no need for onchange...i think.

props 

child(color)Return{

    div color:usercolor     TESTING
}


12/15

onchange and onsubmit are props as they can pass arguments
 (the input) into functions

 need <note info="text"

app() needs to have a return() too    


need to have event for not, but having trouble importing the event itself





 need to make array of notes
 https://refine.dev/blog/react-props/#passing-array-to-react-component

function DisplayUsers(props) {
  const users = props.users;
 const users = [
  {
    id: 0,
    name: "Chidume Nnamdi",
    age: 54,
  },
  {
    id: 1,
    name: "Karim",
    age: 24,
  }
];

return a map of users to return     
    <div>user.id</div>
    <div>user.name</div>


check the formsubmit for react18 figure out functions 

use action instead of onsubmit



controlled forms will store the values in state and always be rerendered when anything is done
    ex formdata =  usestate name email
        form
            name 
            email
    harder with forms with varying quantities of vlaues, like tables because of too many states

uncontrolled inputs use normal js for form data
    browser manages the value
    rander will run the onsubmit when the event is triggered
    weakness: less direct access to each value. harder to validate or manipulate values. 
    use formdata, not useref

12/16

controlled and untrolled have big differences in how they are set up

controlled means that there isnt a need for submit because the rendering handles the submitting



since uncontrolled is more vanilla, it doesnt use state, instead more normal declarations


my code had been an inproper amalgamation of both 

12/17


BIG detail. setting the setnotcontent sort of cancels out the "delay" in rendering

mapping elements have a key to  keep track of values
keys need to be generately independantly, not while rendering. also, an items index in an arry shouldnt be its key. 
    can use incrmenting counter

figure out how to append the notes. nothings changing.


12/18

I feel like I have props better understood wehn in practice. It will feed info down the chain.
Meed to figure out way how to do that with state

not sure if the notecontent is passing

I noticed that undefined keepas passing, even when I am not submitting a value
it is also doing it 2x

look up more about props


12/19

even when following most basic ideas, unable to make the note component viausalize. maybe its the positioning in the function?
is there an issue with 2 returns in form.jsx   

12/20

CANT render jsx in the submit event code. only add more in the state ret=rendering


12/21

made the note work...in some capacity

need way to continously increase th number of notes using map

having trouble witht he syntax fo the map statement
    the map statement needs to be declared as a const. however, there is an error when I attempt that. It might be related to 
the return() statement

12/22

Uncaught TypeError: Legends.map is not a function
    Legends should be an array but isnt. need to check the type


    the key DOESNT have to be numbers. but just having an array wont work